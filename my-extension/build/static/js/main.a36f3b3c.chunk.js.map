{"version":3,"sources":["components/QuestionCard.js","components/Question.js","App.js","serviceWorker.js","index.js"],"names":["QuestionCard","_this","this","react_default","a","createElement","Card","Content","Header","className","props","question","name","Icon","disabled","onClick","onDismissQuestion","questionIndex","Meta","tags","map","x","Description","extra","Button","basic","color","Component","Question","console","log","Group","questionData","i","components_QuestionCard","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","hostname","window","location","foundQuestions","questions","filter","domains","indexOf","toLowerCase","state","value","handleChange","bind","assertThisInitialized","handleClickOutside","document","addEventListener","removeEventListener","event","setState","target","t","all","selection","createRange","text","getSelection","focusNode","data","index","toConsumableArray","splice","Message","floating","id","type","onChange","onchange","components_Question","Boolean","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a36f3b3c.chunk.js","sourcesContent":["import React, {Component} from 'react';\n// import {Container, List, Button} from 'semantic-ui-react';\nimport { Button, Card, Image, Icon } from 'semantic-ui-react'\n\nclass QuestionCard extends Component {\n  render() {\n    return (\n   <Card>\n     <Card.Content>\n       <Card.Header>\n      <div className=\"qitw_col\">\n        <div>{this.props.question.name}</div>\n        <Icon disabled name='times' onClick={() => this.props.onDismissQuestion(this.props.questionIndex)}/>\n\n      </div>\n     </Card.Header>\n       <Card.Meta>\n         {this.props.question.tags.map(x=> <span className=\"qitw_tag\">{x}</span>)}\n\n       </Card.Meta>\n       <Card.Description>\n       </Card.Description>\n     </Card.Content>\n     <Card.Content extra>\n       <div className='ui two buttons'>\n         <Button basic color='green'>\n           Submit\n         </Button>\n         <Button basic color='red'>\n           Skip\n         </Button>\n       </div>\n     </Card.Content>\n   </Card>\n\n\n\n    );\n  }\n};\n\nexport default QuestionCard;\n","import React, {Component} from 'react';\n// import {Container, List, Button} from 'semantic-ui-react';\nimport { Button, Card, Image, Icon } from 'semantic-ui-react'\nimport QuestionCard from './QuestionCard';\n\nclass Question extends Component {\n  render() {\n    console.log(this.props)\n    return (\n      <Card.Group>\n        { this.props.questionData.map((x,i) =><QuestionCard question={x} questionIndex={i} onDismissQuestion={this.props.onDismissQuestion}/>)\n}\n</Card.Group>\n\n    );\n  }\n};\n\nexport default Question;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport questionData from './questions.json';\nimport { Message } from 'semantic-ui-react'\n\nclass App extends Component {\n  constructor(props) {\n      super(props);\n      var hostname = window.location.hostname;\n      console.log(hostname)\n      hostname = hostname === \"localhost\" ? \"kubernetes.io\": hostname;\n\n      var foundQuestions = questionData.questions.filter(x=> x.domains.indexOf(hostname.toLowerCase())> -1 );\n\n      this.state = {value: '', questions: foundQuestions};\n\n\n      this.handleChange = this.handleChange.bind(this);\n      // this.handleSubmit = this.handleSubmit.bind(this);  this.setWrapperRef = this.setWrapperRef.bind(this);\n      this.handleClickOutside = this.handleClickOutside.bind(this);\n      this.onDismissQuestion = this.onDismissQuestion.bind(this);\n      // this.handleDomain();\n    }\n\n\n\ncomponentDidMount() {\n  document.addEventListener('mouseup', this.handleClickOutside);\n}\n\ncomponentWillUnmount() {\n  document.removeEventListener('mouseup', this.handleClickOutside);\n}\nhandleChange(event) {\n  this.setState({value: event.target.value});\n}\nhandleClickOutside(event) {\n  console.log(event)\n  var t = (document.all) ? document.selection.createRange().text : document.getSelection();\n  console.log(t)\n  this.setState({value: t.focusNode.data})\n   // if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n   //   alert('You clicked outside of me!');\n   // }\n }\n\n onDismissQuestion(index){\n   console.log(index)\n    var questions = [...this.state.questions];\n    questions.splice(index, 1);\n\n   this.setState({questions: questions})\n   // var hostname = window.location.hostname\n   // console.log(hostname);\n   // console.log(this)\n   // console.log(\"handleDomain\", this.state.questions.filter(x=> x.domains.indexOf(hostname.toLowerCase())> -1 ))\n   // var foundQuestions = this.state.questions.filter(x=> x.domains.indexOf(hostname.toLowerCase())> -1 );\n   // console.log(\"foundQuestions\", foundQuestions)\n   //\n   // this.setState({questions: foundQuestions})\n\n }\n  render() {\n    return (\n      <div className=\"App\">\n        <Message floating>\n          You highlighted:\n          {this.state.value}\n\n          <input id=\"myinput\"  type=\"hidden\" name=\"highlightedText\" value={this.state.value} onChange={this.handleChange} onchange={this.handleChange} />\n        </Message>\n        <Question questionData={this.state.questions} onDismissQuestion={this.onDismissQuestion}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}