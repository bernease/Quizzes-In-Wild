{"version":3,"sources":["components/QuestionCard.js","components/Question.js","components/AddQuestion.js","App.js","serviceWorker.js","index.js"],"names":["QuestionCard","_this","this","react_default","a","createElement","Card","style","borderRadus","Content","Header","className","props","question","name","Icon","disabled","onClick","onDismissQuestion","questionIndex","Meta","tags","map","x","Description","extra","Button","basic","color","Component","Question","console","log","Group","questionData","i","components_QuestionCard","AddQuestion","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleOnClickAsk","bind","assertThisInitialized","handleOnClickAnswer","handleOnClickInput","handleChange","state","asking","value","setState","alert","onAddQuestion","domains","window","location","hostname","answers","choices","votes","dismiss","event","target","Input","onChange","action","placeholder","App","foundQuestions","questions","filter","indexOf","toLowerCase","handleClickOutside","handleAddQuestion","document","addEventListener","removeEventListener","t","all","selection","createRange","text","getSelection","focusNode","data","index","toConsumableArray","splice","newQuestion","concat","Message","floating","id","type","components_AddQuestion","components_Question","Boolean","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a29763e4.chunk.js","sourcesContent":["import React, {Component} from 'react';\n// import {Container, List, Button} from 'semantic-ui-react';\nimport { Button, Card, Image, Icon } from 'semantic-ui-react'\n\nclass QuestionCard extends Component {\n  render() {\n    return (\n   <Card style={{\"borderRadus\" :0}}>\n     <Card.Content>\n       <Card.Header>\n      <div className=\"qitw_col\">\n        <div>{this.props.question.name}</div>\n        <Icon disabled name='times' onClick={() => this.props.onDismissQuestion(this.props.questionIndex)}/>\n\n      </div>\n     </Card.Header>\n       <Card.Meta className=\"qitw_tag_parent\">\n         {this.props.question.tags.map(x=> <span className=\"qitw_tag\">{x}</span>)}\n\n       </Card.Meta>\n       <Card.Description>\n       </Card.Description>\n     </Card.Content>\n     <Card.Content extra>\n       <div className='ui two buttons'>\n         <Button basic color='green'>\n           Submit\n         </Button>\n         <Button basic color='red'>\n           Skip\n         </Button>\n       </div>\n     </Card.Content>\n   </Card>\n\n\n\n    );\n  }\n};\n\nexport default QuestionCard;\n","import React, {Component} from 'react';\n// import {Container, List, Button} from 'semantic-ui-react';\nimport { Button, Card, Image, Icon } from 'semantic-ui-react'\nimport QuestionCard from './QuestionCard';\n\nclass Question extends Component {\n  render() {\n    console.log(this.props)\n    return (\n      <Card.Group>\n        { this.props.questionData.map((x,i) =><QuestionCard question={x} questionIndex={i} onDismissQuestion={this.props.onDismissQuestion}/>)\n}\n</Card.Group>\n\n    );\n  }\n};\n\nexport default Question;\n","import React, {Component} from 'react';\nimport {Card, Button, Input} from 'semantic-ui-react';\n\nclass AddQuestion extends Component {\n  constructor(props) {\n    super(props);\n    this.handleOnClickAsk = this.handleOnClickAsk.bind(this);\n    this.handleOnClickAnswer = this.handleOnClickAnswer.bind(this);\n    this.handleOnClickInput = this.handleOnClickInput.bind(this);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {asking: false, value: \"\"};\n  }\n\n  handleOnClickAsk() {\n    this.setState({asking: true});\n  }\n\n  handleOnClickAnswer() {\n    alert(\"answer question i guess\");\n  }\n\n  handleOnClickInput() {\n    this.setState({asking: false});\n    this.props.onAddQuestion({\n      \"name\": this.state.value,\n      \"tags\":[\"Big Bang Theory\", \"science\"],\n      \"domains\":[window.location.hostname],\n      \"answers\":[],\n      \"choices\":[],\n      \"votes\": 0,\n      \"dismiss\": 0\n    });\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  render() {\n    return (\n      <Card>\n        <Card.Content>\n          <Card.Header>\n        <div className=\"qitw_col\">\n          <div>Contribute</div>\n        </div>\n        </Card.Header>\n        </Card.Content>\n        <Card.Content extra>\n          {this.state.asking ?\n            <Input onChange={this.handleChange} action={<Button onClick={this.handleOnClickInput}>Add</Button>} placeholder='Type...' />\n            :\n            <Button basic color='green' onClick={this.handleOnClickAsk}>\n              Add a Question\n            </Button>\n          }\n          <Button basic color='blue' onClick={this.handleOnClickAnswer}>\n            Answer a Question\n          </Button>\n        </Card.Content>\n    </Card>\n \n    );\n  }\n};\n\nexport default AddQuestion;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport questionData from './questions.json';\nimport AddQuestion from './components/AddQuestion';\nimport { Message } from 'semantic-ui-react'\n\nclass App extends Component {\n  constructor(props) {\n      super(props);\n      var hostname = window.location.hostname;\n      console.log(hostname)\n      hostname = hostname === \"localhost\" ? \"kubernetes.io\": hostname;\n\n      var foundQuestions = questionData.questions.filter(x=> x.domains.indexOf(hostname.toLowerCase())> -1 );\n\n      this.state = {value: '', questions: foundQuestions};\n\n\n      this.handleChange = this.handleChange.bind(this);\n      // this.handleSubmit = this.handleSubmit.bind(this);  this.setWrapperRef = this.setWrapperRef.bind(this);\n      this.handleClickOutside = this.handleClickOutside.bind(this);\n      this.handleAddQuestion = this.handleAddQuestion.bind(this);\n      // this.handleDomain = this.handleDomain.bind(this);\n      this.onDismissQuestion = this.onDismissQuestion.bind(this);\n      // this.handleDomain();\n    }\n\n\n\ncomponentDidMount() {\n  document.addEventListener('mouseup', this.handleClickOutside);\n}\n\ncomponentWillUnmount() {\n  document.removeEventListener('mouseup', this.handleClickOutside);\n}\nhandleChange(event) {\n  this.setState({value: event.target.value});\n}\nhandleClickOutside(event) {\n  console.log(event)\n  var t = (document.all) ? document.selection.createRange().text : document.getSelection();\n  console.log(t)\n  this.setState({value: t.focusNode.data})\n   // if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n   //   alert('You clicked outside of me!');\n   // }\n }\n\n onDismissQuestion(index){\n   console.log(index)\n    var questions = [...this.state.questions];\n    questions.splice(index, 1);\n\n   this.setState({questions: questions})\n   // var hostname = window.location.hostname\n   // console.log(hostname);\n   // console.log(this)\n   // console.log(\"handleDomain\", this.state.questions.filter(x=> x.domains.indexOf(hostname.toLowerCase())> -1 ))\n   // var foundQuestions = this.state.questions.filter(x=> x.domains.indexOf(hostname.toLowerCase())> -1 );\n   // console.log(\"foundQuestions\", foundQuestions)\n   //\n   // this.setState({questions: foundQuestions})\n\n }\n handleAddQuestion(newQuestion) {\n  this.setState({\n    questions: [\n      newQuestion,\n      ...this.state.questions\n    ]\n  });\n }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Message floating>\n          You highlighted:\n          {this.state.value}\n\n          <input id=\"myinput\"  type=\"hidden\" name=\"highlightedText\" value={this.state.value} onChange={this.handleChange}/>\n        </Message>\n        <AddQuestion onAddQuestion={this.handleAddQuestion}/>\n        <Question questionData={this.state.questions} onDismissQuestion={this.onDismissQuestion}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}